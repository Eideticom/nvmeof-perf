#!/usr/bin/env python3
########################################################################
##
## Copyright 2018 Eidetic Communications Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License. You may
## obtain a copy of the License at
## http://www.apache.org/licenses/LICENSE-2.0 Unless required by
## applicable law or agreed to in writing, software distributed under the
## License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
## CONDITIONS OF ANY KIND, either express or implied. See the License for
## the specific language governing permissions and limitations under the
## License.
##
########################################################################

from nvmeof_perf import cpustats, iostats, likwid, rnic, switchtec, utils

import csv
import re
import sys
import time
import contextlib
import platform

for l in open("/proc/cpuinfo"):
    field, value = l.split(":")
    if field.strip() == "model name":
        cpu_model = value.strip()
        break

def print_hostinfo():
    uname = platform.uname()

    print("Host:    {.node}".format(uname))
    print("Kernel:  {}".format(platform.platform()))
    print("Machine: {.machine}".format(uname))
    print("CPU:     {}".format(cpu_model))

class Logger(object):
    ansi_regex = r'\x1b(' \
    		 r'(\[\??\d+[hl])|' \
                 r'([=<>a-kzNM78])|' \
                 r'([\(\)][a-b0-2])|' \
                 r'(\[\d{0,2}[ma-dgkjqi])|' \
                 r'(\[\d+;\d+[hfy]?)|' \
                 r'(\[;?[hf])|' \
                 r'(#[3-68])|' \
                 r'([01356]n)|' \
                 r'(O[mlnp-z]?)|' \
                 r'(/Z)|' \
                 r'(\d+)|' \
                 r'(\[\?\d;\d0c)|' \
                 r'(\d;\dR))'
    ansi_escape = re.compile(ansi_regex, flags=re.IGNORECASE)

    def __init__(self, fil):
        self.terminal = sys.stdout
        self.log = fil

    def write(self, data):
        self.terminal.write(data)
        self.log.write(self.ansi_escape.sub("", data))

class CsvWriter(object):
    def __init__(self, f):
        self.csv = csv.writer(f)
        self.first = True

    def write_header(self, timelines):
        fieldnames = tuple(n for tl in timelines for n in tl.csv_titles())
        fieldnames = ('timestamp', ) + fieldnames
        self.csv.writerow(fieldnames)

    def write_timelines(self, timelines):
        if self.first:
            self.write_header(timelines)

        row = tuple(x for tl in timelines for x in tl.csv())
        row = (time.time(), ) + row
        self.csv.writerow(row)

        self.first = False

if __name__ == "__main__":
    import argparse

    p = argparse.ArgumentParser()
    p.add_argument("-c", "--csv", type=argparse.FileType('w'),
                   help="log all data to a specified csv file")
    p.add_argument("-d", "--disk", default=[], action="append",
                   help="disk device stats to print")
    p.add_argument("-m", "--memory", action="store_true",
                   help="print memory bandwith stats using likwid-perfctr")
    p.add_argument("-l", "--log", type=argparse.FileType('w'),
                   help="log all data to the specified file")
    p.add_argument("-r", "--rnic", default=[], action="append",
                   help="RNIC device stats to print")
    p.add_argument("-s", "--switchtec", default=[], action="append",
                   help="Switchtec devices to print")
    p.add_argument("-t", "--time", default=2.0, type=float,
                   help="time between printing samples")
    p.add_argument("-u", "--runtime", default=0, type=float,
                   help="runtime of program")
    args = p.parse_args()

    logfile = sys.stdout
    if args.log:
        logfile = Logger(args.log)

    csvfile = None
    if args.csv:
        csvfile = CsvWriter(args.csv)

    try:
        timelines = []

        def add_timeline(timeline, **kwargs):
            timelines.append(timeline(period=args.time, **kwargs))

        add_timeline(cpustats.CpuTimeline)

        if args.memory:
            add_timeline(likwid.LikwidTimeline)

        if args.disk:
            add_timeline(iostats.IoStatsTimeline, devices=args.disk)

        if args.rnic:
            add_timeline(rnic.RnicTimeline, devices=args.rnic)

        for s in args.switchtec:
            add_timeline(switchtec.SwitchtecTimeline, devpath=s)

        with contextlib.ExitStack() as stack:
            for tl in timelines:
                stack.enter_context(tl)

            with utils.CursesContext() as scr:
                scr.clear()

                start_time = time.time()
                while args.runtime <= 0 or time.time() - start_time < args.runtime:
                    for tl in timelines:
                        tl.wait_until_ready()

                    print_hostinfo()

                    with contextlib.redirect_stdout(logfile):
                        print(time.asctime())

                        for tl in timelines:
                            print()
                            tl.print_next()

                        print()
                        print()
                        print()

                        if csvfile:
                            csvfile.write_timelines(timelines)

                    scr.clear()

    except KeyboardInterrupt:
        print()
        print()
    except Exception as e:
        print(e)
